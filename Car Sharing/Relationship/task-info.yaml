type: edu
files:
  - name: src/carsharing/Main.java
    visible: true
    text: |-
      package carsharing;
      
      public class Main {
      
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: test/CarSharingTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      import org.junit.BeforeClass;
      
      import java.io.File;
      
      public class CarSharingTest extends StageTest<Void> {
      
          private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
          private static DatabaseUtil db = new DatabaseUtil();
      
          @BeforeClass
          public static void deleteDatabaseFile() {
              File file = new File(databaseFileName);
      
              if (!file.exists()) {
                  return;
              }
      
              if (!file.delete()) {
                  throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                      "Make sure you close all the connections with the database file!");
              }
          }
      
          @DynamicTest(order = -1)
          public CheckResult test2_ifDatabaseExist() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
              program.execute("0");
      
              if (!program.isFinished()) {
                  return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
              }
      
              File file = new File(databaseFileName);
      
              if (!file.exists()) {
                  return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                      " and located in /carsharing/db/ folder.\n" +
                      "The file should be created right after starting the program!");
              }
      
              return correct();
          }
      
          @DynamicTest
          public CheckResult test1_testMenu() {
              TestedProgram program = new TestedProgram();
              String output = program.start("-databaseFileName", "carsharing");
      
              if (!output.contains("1. Log in as a manager")) {
                  return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
              }
      
              if (!output.contains("0. Exit")) {
                  return CheckResult.wrong("Start menu should contain \"0. Exit\"");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Company list")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
              }
      
              if (!output.contains("2. Create a company")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
              }
      
              if (!output.contains("0. Back")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
              }
      
              output = program.execute("0");
      
              if (!output.contains("1. Log in as a manager")) {
                  return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
              }
      
              if (!output.contains("0. Exit")) {
                  return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          public CheckResult test3_checkDatabaseConnection() {
              db.getConnection();
              return correct();
          }
      
          @DynamicTest
          public CheckResult test4_checkIfTableExists() {
              if (!db.ifTableExist("company")) {
                  return wrong("Can't find table named 'company'");
              }
              if (!db.ifTableExist("car")) {
                  return wrong("Can't find table named 'car'");
              }
              return correct();
          }
      
          @DynamicTest
          public CheckResult test5_checkTableColumns() {
              String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
              db.ifColumnsExist("company", companyColumns);
              db.checkCompanyColumnProperties();
      
              String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
              db.ifColumnsExist("car", carColumns);
              db.checkCarColumnProperties();
              return correct();
          }
      
          @DynamicTest
          public CheckResult test6_testAddCompany() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
      
              db.clearCarTable();
              db.clearCompanyTable();
      
              program.execute("1");
              String output = program.execute("1");
      
              if (!output.contains("The company list is empty")) {
                  return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
              }
      
              output = program.execute("2");
      
              if (!output.contains("Enter the company name")) {
                  return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                      "Your output should contain 'Enter the company name:'");
              }
      
              program.execute("Super company");
              output = program.execute("1");
      
              if (!output.contains("1. Super company")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '1. Super company'");
              }
      
              db.checkCompany("Super company");
      
              program.execute("0\n2\nAnother company");
              program.execute("2\nOne more company");
      
              db.checkCompany("Another company");
              db.checkCompany("One more company");
      
              output = program.execute("1");
      
              if (!output.contains("1. Super company")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '1. Super company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Another company")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '2. Another company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("3. One more company")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '2. Another company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("There is no back option in the company list.\n" +
                      "Your output should contain '0. Back'");
              }
      
              program.execute("2");
      
              return correct();
          }
      
          @DynamicTest
          public CheckResult test7_testAddCar() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
              String output;
      
              db.clearCarTable();
              db.clearCompanyTable();
      
              program.execute("1");
              program.execute("2");
              program.execute("Car To Go");
              program.execute("2");
              program.execute("Drive Now");
      
              db.checkCompany("Car To Go");
              db.checkCompany("Drive Now");
      
              output = program.execute("1");
      
              if (!output.contains("1. Car To Go")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '1. Car To Go'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Drive Now")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '2. Drive Now'\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("There is no back option in the company list.\n" +
                      "Your output should contain '0. Back'");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Car list")) {
                  return wrong("After choosing company you should print menu that contains '1. Car list' item");
              }
      
              if (!output.contains("2. Create a car")) {
                  return wrong("After choosing company you should print menu that contains '2. Create a car' item");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("After choosing company you should print menu that contains '0. Back' item");
              }
      
              output = program.execute("1");
      
              if (!output.contains("The car list is empty!")) {
                  return wrong("If no cars were added to the company you should print 'The car list is empty!'");
              }
      
              output = program.execute("2");
      
              if (!output.contains("Enter the car name:")) {
                  return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                      "Your output should contain 'Enter the car name:'");
              }
      
              program.execute("Hyundai Venue");
              db.checkCar("Car To Go", "Hyundai Venue");
      
              program.execute("2");
              program.execute("Maruti Suzuki Dzire");
              db.checkCar("Car To Go", "Maruti Suzuki Dzire");
      
              output = program.execute("1");
      
              if (!output.contains("1. Hyundai Venue")) {
                  return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                      "Your output should contain '1. Hyundai Venue'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Maruti Suzuki Dzire")) {
                  return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                      "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              program.execute("0");
      
              program.execute("1");
              program.execute("2");
      
              output = program.execute("1");
      
              if (!output.contains("The car list is empty!")) {
                  return wrong("If no cars were added to the company you should print 'The car list is empty!'");
              }
      
              program.execute("2");
              program.execute("Lamborghini Urraco");
      
              output = program.execute("1");
      
              if (!output.contains("1. Lamborghini Urraco")) {
                  return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                      "Your output should contain '1. Lamborghini Urraco'");
              }
      
              if (output.contains("Hyundai Venue")) {
                  return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
              }
      
              if (output.contains("Maruti Suzuki Dzire")) {
                  return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
              }
      
              db.checkCar("Drive Now", "Lamborghini Urraco");
      
              program.execute("0");
              program.execute("0");
              program.execute("0");
      
              return correct();
          }
      
          private CheckResult wrong(String message) {
              db.closeConnection();
              return CheckResult.wrong(message);
          }
      
          private CheckResult correct() {
              db.closeConnection();
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: test/DatabaseUtil.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.sql.*;
      import java.util.HashMap;
      
      public class DatabaseUtil {
      
          private Connection connection = null;
          private static final String databaseFilePath = "./src/carsharing/db/carsharing";
      
          public Connection getConnection() {
              if (connection != null) {
                  return connection;
              }
              try {
                  connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't connect to the database.");
              }
              return connection;
          }
      
          public void closeConnection() {
              if (connection != null) {
                  try {
                      connection.close();
                  } catch (SQLException ignored) {
                      System.out.println(ignored.getErrorCode());
                      throw new WrongAnswer("Can't close connection to the database.");
                  }
                  connection = null;
              }
          }
      
          public ResultSet executeQuery(String query) {
              try {
                  return getConnection().createStatement().executeQuery(query);
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public boolean ifTableExist(String tableName) {
              try {
                  tableName = tableName.toUpperCase();
                  ResultSet resultSet = executeQuery("SHOW TABLES");
                  while (resultSet.next()) {
                      if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                          return true;
                      }
                  }
                  return false;
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void ifColumnsExist(String tableName, String[][] columns) {
              try {
                  ResultSet resultSet = getConnection()
                          .createStatement()
                          .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());
      
                  HashMap<String, String> correctColumns = new HashMap<>();
                  for (String[] column : columns) {
                      correctColumns.put(column[0], column[1]);
                  }
      
                  while (resultSet.next()) {
                      String columnName = resultSet.getString("FIELD");
                      if (correctColumns.containsKey(columnName)) {
                          if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                              throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                      + "' column should be of " + correctColumns.get(columnName) + " type.");
                          }
                          correctColumns.remove(columnName);
                      }
                  }
                  if (!correctColumns.isEmpty()) {
                      throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void clearCompanyTable() {
              try {
                  getConnection().createStatement().execute("DELETE FROM COMPANY");
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't delete rows from the COMPANY table.");
              }
              try {
                  getConnection().createStatement().execute("ALTER TABLE COMPANY ALTER COLUMN id RESTART WITH 1");
              } catch (SQLException ex) {
                  throw new WrongAnswer("Can't reset the ID column in the COMPANY table. " +
                          "Make sure that this column is AUTO_INCREMENT");
              }
          }
      
          public void clearCarTable() {
              try {
                  getConnection().createStatement().execute("DELETE FROM CAR");
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't delete rows from the CAR table.");
              }
              try {
                  getConnection().createStatement().execute("ALTER TABLE CAR ALTER COLUMN id RESTART WITH 1");
              } catch (SQLException ex) {
                  throw new WrongAnswer("Can't reset the ID column in the CAR table. " +
                          "Make sure that this column is AUTO_INCREMENT");
              }
          }
      
          public void checkCompany(String name) {
              try {
                  PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                  preparedStatement.setString(1, name);
                  ResultSet resultSet = preparedStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table.");
                  }
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
              }
          }
      
          public void checkCar(String companyName, String carName) {
              try {
                  PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                  companyStatement.setString(1, companyName);
      
                  PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                  carStatement.setString(1, carName);
      
                  ResultSet resultSet = companyStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                  }
      
                  int id = resultSet.getInt("ID");
      
                  resultSet = carStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.");
                  }
                  if (resultSet.getInt("COMPANY_ID") != id) {
                      throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' ID.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void checkCompanyColumnProperties() {
              try {
                  ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void checkCarColumnProperties() {
              try {
                  ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                  }
      
                  if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      }
    learner_created: false
  - name: src/carsharing/Car.java
    visible: true
    text: |
      package carsharing;
      
      public record Car(int id, String name, int companyId) {
      }
    learner_created: true
  - name: src/carsharing/Company.java
    visible: true
    text: |
      package carsharing;
      
      public record Company(int id, String name) {
      }
    learner_created: true
  - name: src/carsharing/H2DatabaseHelper.java
    visible: true
    text: |
      package carsharing;
      
      import java.sql.*;
      import java.util.ArrayList;
      import java.util.List;
      
      public class H2DatabaseHelper {
          static final String JDBC_DRIVER = "org.h2.Driver";
          static final String DB_URL = "jdbc:h2:./src/carsharing/db/";
      
          private Connection connection;
          public H2DatabaseHelper(String dbFileName) {
              if (dbFileName == null || dbFileName.isEmpty()) {
                  dbFileName = "carsharing";
              }
              String dbnUrl = DB_URL + dbFileName;
              try {
                  Class.forName(JDBC_DRIVER);
      
                  //STEP 2: Open a connection
                  connection = DriverManager.getConnection(dbnUrl,"","");
                  connection.setAutoCommit(true);
                  migrate();
              } catch (Exception e) {
                  System.err.println(e.getMessage());
              }
          }
      
          //region Company
          public List<Company> getAllCompanies() {
              List<Company> result = new ArrayList<>();
              try {
                  Statement stmt = connection.createStatement();
                  ResultSet rs = stmt.executeQuery(SqlGenerate.SELECT_TBL_COMPANY);
      
                  // Extract data from result set
                  while(rs.next()) {
                      // Retrieve by column name
                      int id  = rs.getInt("ID");
                      String name = rs.getString("NAME");
                      result.add(new Company(id, name));
                  }
                  rs.close();
              } catch (Exception e) {
                  System.err.println(e.getMessage());
              }
              return result;
          }
      
          public void addNewCompany(String name) {
              try {
                  String sql = SqlGenerate.INSERT_COMPANY;
                  PreparedStatement stmt = connection.prepareStatement(sql);
                  stmt.setString(1, name);
                  stmt.executeUpdate();
              } catch (Exception e) {
                  System.err.println(e.getMessage());
              }
          }
          //endregion
      
          //region Cars
          public List<Car> getAllCars(Company company) {
              List<Car> result = new ArrayList<>();
              try {
                  PreparedStatement stmt = connection.prepareStatement(SqlGenerate.SELECT_TBL_CAR);
                  stmt.setInt(1, company.id());
                  ResultSet rs = stmt.executeQuery();
      
                  // Extract data from result set
                  while(rs.next()) {
                      // Retrieve by column name
                      int id  = rs.getInt("ID");
                      String name = rs.getString("NAME");
                      int companyId = rs.getInt("COMPANY_ID");
                      result.add(new Car(id, name, companyId));
                  }
                  rs.close();
              } catch (Exception e) {
                  System.err.println(e.getMessage());
              }
              return result;
          }
      
          public void addNewCar(String name, Company company) {
              try {
                  PreparedStatement stmt = connection.prepareStatement(SqlGenerate.INSERT_CAR);
                  stmt.setString(1, name);
                  stmt.setInt(2, company.id());
                  stmt.executeUpdate();
              } catch (Exception e) {
                  System.err.println(e.getMessage());
              }
          }
          //endregion
      
          private void migrate() {
              List<String> sqlList = List.of(
                      SqlGenerate.CREATE_TBL_COMPANY,
                      SqlGenerate.CREATE_TBL_CAR
                      );
              executeSql(sqlList);
          }
      
          private void executeSql(List<String> sqlList) {
              Statement stmt = null;
              try {
                  // Execute sql list
                  stmt = connection.createStatement();
                  for (String sql: sqlList) {
                      stmt.executeUpdate(sql);
                  }
                  // Close statement
                  stmt.close();
              } catch(Exception e) {
                  System.err.println(e.getMessage());
              } finally {
                  // Clean up
                  try {
                      if (stmt!=null) stmt.close();
                  } catch(SQLException se2) {
                      System.err.println(se2.getMessage());
                  }
              }
          }
      
      }
    learner_created: true
  - name: src/carsharing/SqlGenerate.java
    visible: true
    text: |
      package carsharing;
      
      public class SqlGenerate {
          public static String CREATE_TBL_COMPANY = """
                  CREATE TABLE IF NOT EXISTS COMPANY (
                    ID int NOT NULL PRIMARY KEY AUTO_INCREMENT,
                    NAME VARCHAR(255) NOT NULL UNIQUE
                  )""";
          public static String CREATE_TBL_CAR = """
                  CREATE TABLE IF NOT EXISTS CAR (
                    ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\s
                    NAME VARCHAR(255) NOT NULL UNIQUE,\s
                    COMPANY_ID INT NOT NULL,\s
                    FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(ID)
                  )""";
          public static String SELECT_TBL_COMPANY = "SELECT * FROM COMPANY ORDER BY ID";
          public static String SELECT_TBL_CAR = "SELECT * FROM CAR WHERE COMPANY_ID = ? ORDER BY ID";
          public static String INSERT_COMPANY = "INSERT INTO COMPANY (NAME) VALUES (?)";
          public static String INSERT_CAR = "INSERT INTO CAR (NAME) VALUES (?)";
      }
    learner_created: true
  - name: src/carsharing/db/carsharing.trace.db
    visible: true
    text: "2024-04-08 14:04:33 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Table \"COMPANY\" already exists; SQL statement:\nCREATE TABLE COMPANY (ID int\
    \ NOT NULL, NAME VARCHAR(255)) [42101-200]\n2024-04-08 19:59:55 jdbc[3]: exception\n\
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement \"ALTER\
    \ TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT NULL AUTO_INCREMENT PRIMARY[*]\
    \ KEY\"; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT\
    \ NULL AUTO_INCREMENT PRIMARY KEY [42000-200]\n2024-04-08 19:59:55 jdbc[4]: exception\n\
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement \"ALTER\
    \ TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT NULL AUTO_INCREMENT PRIMARY[*]\
    \ KEY\"; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT\
    \ NULL AUTO_INCREMENT PRIMARY KEY [42000-200]\n2024-04-08 20:01:58 jdbc[3]: exception\n\
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement \"ALTER\
    \ TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT NULL AUTO_INCREMENT IDENTITY[*]\"\
    ; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT NULL AUTO_INCREMENT\
    \ IDENTITY [42000-200]\n2024-04-08 20:01:58 jdbc[4]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID\
    \ INT NOT NULL AUTO_INCREMENT IDENTITY[*]\"; SQL statement:\nALTER TABLE IF EXISTS\
    \ COMPANY ALTER COLUMN ID INT NOT NULL AUTO_INCREMENT IDENTITY [42000-200]\n2024-04-08\
    \ 20:03:03 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax\
    \ error in SQL statement \"ALTER TABLE IF EXISTS COMPANY ADD CONSTRAINT PK_ID\
    \ PRIMARYKEY[*](ID);\"; expected \"., COMMENT, PRIMARY, INDEX, KEY, CHECK, UNIQUE,\
    \ FOREIGN\"; SQL statement:\nALTER TABLE IF EXISTS COMPANY ADD CONSTRAINT pk_id\
    \ PRIMARYKEY(ID); [42001-200]\n2024-04-08 20:03:03 jdbc[4]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE IF EXISTS COMPANY ADD CONSTRAINT\
    \ PK_ID PRIMARYKEY[*](ID);\"; expected \"., COMMENT, PRIMARY, INDEX, KEY, CHECK,\
    \ UNIQUE, FOREIGN\"; SQL statement:\nALTER TABLE IF EXISTS COMPANY ADD CONSTRAINT\
    \ pk_id PRIMARYKEY(ID); [42001-200]\n2024-04-08 20:03:32 jdbc[3]: exception\n\
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement \"ALTER\
    \ TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT NULL AUTO_INCREMENT PRIMARYKEY[*]\"\
    ; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT NULL AUTO_INCREMENT\
    \ PRIMARYKEY [42000-200]\n2024-04-08 20:03:32 jdbc[4]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID\
    \ INT NOT NULL AUTO_INCREMENT PRIMARYKEY[*]\"; SQL statement:\nALTER TABLE IF\
    \ EXISTS COMPANY ALTER COLUMN ID INT NOT NULL AUTO_INCREMENT PRIMARYKEY [42000-200]\n\
    2024-04-08 20:08:12 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE IF EXISTS COMPANY ALTER COLUMN NAME\
    \ VARCHAR(255) NOT NULL UNIQUE[*]\"; SQL statement:\nALTER TABLE IF EXISTS COMPANY\
    \ ALTER COLUMN NAME VARCHAR(255) NOT NULL UNIQUE [42000-200]\n2024-04-08 20:08:12\
    \ jdbc[4]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Attempt to define\
    \ a second primary key; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN\
    \ ID INT NOT NULL IDENTITY [90017-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:129)\n\
    \tat org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.execute(AlterTableAlterColumn.java:587)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:489)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:301)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:289)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:195)\n\
    \tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.H2DatabaseHelper.executeSql(H2DatabaseHelper.java:74)\n\
    \tat carsharing.H2DatabaseHelper.migrate(H2DatabaseHelper.java:65)\n\tat carsharing.H2DatabaseHelper.<init>(H2DatabaseHelper.java:23)\n\
    \tat carsharing.Main.main(Main.java:12)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:840)\n2024-04-08 20:12:07 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"PRIMARYKEY\"\
    ; SQL statement:\nALTER TABLE IF EXISTS COMPANY ADD name_unique PRIMARYKEY(name)\
    \ [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseAlterTableAddColumn(Parser.java:8133)\n\tat org.h2.command.Parser.parseAlterTable(Parser.java:7690)\n\
    \tat org.h2.command.Parser.parseAlter(Parser.java:6983)\n\tat org.h2.command.Parser.parsePrepared(Parser.java:887)\n\
    \tat org.h2.command.Parser.parse(Parser.java:843)\n\tat org.h2.command.Parser.parse(Parser.java:815)\n\
    \tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\
    \tat org.h2.engine.Session.prepareCommand(Session.java:595)\n\tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:164)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.H2DatabaseHelper.executeSql(H2DatabaseHelper.java:75)\n\
    \tat carsharing.H2DatabaseHelper.migrate(H2DatabaseHelper.java:66)\n\tat carsharing.H2DatabaseHelper.<init>(H2DatabaseHelper.java:23)\n\
    \tat carsharing.Main.main(Main.java:12)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:840)\n2024-04-08 20:12:07 jdbc[4]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Attempt to define a second\
    \ primary key; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT\
    \ NOT NULL IDENTITY [90017-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:129)\n\
    \tat org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.execute(AlterTableAlterColumn.java:587)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:489)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:301)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:289)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:195)\n\
    \tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.H2DatabaseHelper.executeSql(H2DatabaseHelper.java:75)\n\
    \tat carsharing.H2DatabaseHelper.migrate(H2DatabaseHelper.java:66)\n\tat carsharing.H2DatabaseHelper.<init>(H2DatabaseHelper.java:23)\n\
    \tat carsharing.Main.main(Main.java:12)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:840)\n2024-04-08 20:14:07 jdbc[4]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Attempt to define a second\
    \ primary key; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT\
    \ NOT NULL IDENTITY [90017-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:129)\n\
    \tat org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.execute(AlterTableAlterColumn.java:587)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:489)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:301)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:289)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:195)\n\
    \tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.H2DatabaseHelper.executeSql(H2DatabaseHelper.java:75)\n\
    \tat carsharing.H2DatabaseHelper.migrate(H2DatabaseHelper.java:66)\n\tat carsharing.H2DatabaseHelper.<init>(H2DatabaseHelper.java:23)\n\
    \tat carsharing.Main.main(Main.java:12)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:840)\n2024-04-08 20:14:07 jdbc[8]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Attempt to define a second\
    \ primary key; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT\
    \ NOT NULL IDENTITY [90017-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:129)\n\
    \tat org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.execute(AlterTableAlterColumn.java:587)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:489)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:301)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:289)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:195)\n\
    \tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.H2DatabaseHelper.executeSql(H2DatabaseHelper.java:75)\n\
    \tat carsharing.H2DatabaseHelper.migrate(H2DatabaseHelper.java:66)\n\tat carsharing.H2DatabaseHelper.<init>(H2DatabaseHelper.java:23)\n\
    \tat carsharing.Main.main(Main.java:12)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:840)\n2024-04-08 20:21:45 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement\
    \ \"ALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT NULL IDENTITY PRIMARY[*]\
    \ KEY\"; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT\
    \ NULL IDENTITY PRIMARY KEY [42000-200]\n2024-04-08 20:21:45 jdbc[4]: exception\n\
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement \"ALTER\
    \ TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT NULL IDENTITY PRIMARY[*] KEY\"\
    ; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT NULL IDENTITY\
    \ PRIMARY KEY [42000-200]\n2024-04-08 20:22:03 jdbc[4]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Attempt to define a second primary key; SQL statement:\nALTER TABLE IF EXISTS\
    \ COMPANY ALTER COLUMN ID INT NOT NULL IDENTITY [90017-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:129)\n\
    \tat org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.execute(AlterTableAlterColumn.java:587)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:489)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:301)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:289)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:195)\n\
    \tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.H2DatabaseHelper.executeSql(H2DatabaseHelper.java:75)\n\
    \tat carsharing.H2DatabaseHelper.migrate(H2DatabaseHelper.java:66)\n\tat carsharing.H2DatabaseHelper.<init>(H2DatabaseHelper.java:23)\n\
    \tat carsharing.Main.main(Main.java:12)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:840)\n2024-04-08 20:22:03 jdbc[8]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Attempt to define a second\
    \ primary key; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT\
    \ NOT NULL IDENTITY [90017-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:129)\n\
    \tat org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.execute(AlterTableAlterColumn.java:587)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:489)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:301)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:289)\n\
    \tat org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:195)\n\
    \tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.H2DatabaseHelper.executeSql(H2DatabaseHelper.java:75)\n\
    \tat carsharing.H2DatabaseHelper.migrate(H2DatabaseHelper.java:66)\n\tat carsharing.H2DatabaseHelper.<init>(H2DatabaseHelper.java:23)\n\
    \tat carsharing.Main.main(Main.java:12)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:840)\n2024-04-08 20:22:23 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement\
    \ \"ALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT NULL IDENTITY AUTO_INCREMENT[*]\"\
    ; SQL statement:\nALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID INT NOT NULL IDENTITY\
    \ auto_increment [42000-200]\n2024-04-08 20:22:23 jdbc[4]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE IF EXISTS COMPANY ALTER COLUMN ID\
    \ INT NOT NULL IDENTITY AUTO_INCREMENT[*]\"; SQL statement:\nALTER TABLE IF EXISTS\
    \ COMPANY ALTER COLUMN ID INT NOT NULL IDENTITY auto_increment [42000-200]\n"
    learner_created: true
feedback_link: https://hyperskill.org/projects/140/stages/760/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 09 Apr 2024 08:53:56 UTC"
record: 3
